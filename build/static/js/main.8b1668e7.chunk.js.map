{"version":3,"sources":["assets/LogoMedgoApp.png","Component/AddMessage.js","Component/NavBar.js","Component/ShowMessage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AddMessage","state","name","email","content","handleChange","e","_this","setState","refs","value","handeSubmit","preventDefault","axios","defaults","headers","Content-Type","post","then","data","console","log","document","getElementById","classList","add","showForm","remove","react_default","a","createElement","src","LogoMedgoApp","className","alt","id","onSubmit","this","type","onChange","ref","placeholder","required","pattern","rows","onClick","Component","NavBar","props","Link","to","ShowMessage","messages","_this2","get","res","messagesList","length","map","message","key","_id","App","BrowserRouter","Component_NavBar","Switch","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b1668e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoMedgoApp.9bbe89cf.png\";","import React,{Component} from 'react';\nimport LogoMedgoApp from './../assets/LogoMedgoApp.png';\nimport axios from 'axios';\nclass AddMessage extends Component {\n    state={\n        name:'',\n        email:'',\n        content:''\n    }\n\n    handleChange = (e)=>{\n        this.setState({\n            name : this.refs.name.value,\n            email:this.refs.email.value,\n            content:this.refs.content.value\n        })\n  \n    }\n    handeSubmit =  (e)=>{\n        e.preventDefault()\n        \n            axios.defaults.headers = {\n              'Content-Type': 'application/json'\n          }\n            axios.post('/addmessage',this.state).then(data=>{\n          console.log(data)  \n        })\n\n        \n        this.setState({\n            name:'',\n            email:'',\n            content:''\n        })\n        //Hide Form and Show message on submit\n        document.getElementById(\"slider\").classList.add(\"closed\")\n        document.getElementById(\"oppositeSlider\").classList.add(\"opened\")\n        document.getElementById(\"showForm\").classList.add(\"opened\")\n    }\n    //Hide message and show form\n    showForm = ()=>{\n        document.getElementById(\"slider\").classList.remove(\"closed\")\n        document.getElementById(\"oppositeSlider\").classList.remove(\"opened\")\n        document.getElementById(\"showForm\").classList.add(\"hide\")\n\n    }\n    render(){\n        return(\n            <div>\n            <img src={LogoMedgoApp} className=\"logo center\" alt=\"logo\"/>\n            \n                <div className=\"slider\" id=\"slider\">\n                \n                <form  onSubmit={this.handeSubmit} >\n                    \n                    \n                    <input type=\"text\" \n                    onChange={this.handleChange} \n                    ref=\"name\" \n                    value={this.state.name} \n                    placeholder=\"Your Name\" \n                    required>\n                    </input>\n                    \n                    \n                    <input type=\"text\" \n                    onChange={this.handleChange} \n                    ref=\"email\" \n                    value={this.state.email} \n                    placeholder=\"Your E-mail\"\n                    pattern=\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\" \n                    required>\n                    </input>\n                    \n                    \n                    <textarea rows='1' \n                    className=\"materialize-textarea\" \n                    type=\"text\" \n                    onChange={this.handleChange} \n                    ref=\"content\" \n                    value={this.state.content} \n                    placeholder=\"Message...\" required></textarea>\n                    \n                    <button type=\"submit\" className=\"btn waves-effect light-blue\"  >submit</button>\n\n                </form>\n                </div>\n                \n                <div className=\"oppositeSlider\" id=\"oppositeSlider\">\n                    <h1>Thank you for sending</h1>\n                    <button onClick={this.showForm} id=\"showForm\" className=\"btn waves-effect light-blue\"  >New message ?</button>\n                </div>\n            </div>\n            \n        )\n    }\n}\nexport default AddMessage;","import React from 'react'\nimport {Link} from 'react-router-dom'\nconst NavBar = (props) => {\n   \n    return(\n       \n        <nav>\n            <div className=\"nav-wrapper\">\n                <Link to=\"/\" className=\"brand-logo center\">Contact form</Link>\n                <ul className=\"right\" >\n                    <li><Link to=\"/showmessages\">Messages</Link></li>\n                    \n                  \n                </ul>\n            </div>\n      </nav>\n      \n    )\n}\nexport default  NavBar","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass ShowMessage extends Component {\n    state = {\n        messages: [ ]\n    }\n    componentDidMount() {\n        axios.get('/getmessage').then(res=>{\n            \n            this.setState({\n                messages: res.data\n            })\n            \n         })\n    }\n    render() {\n    \n        const  {messages} = this.state;\n        const messagesList = messages.length ? ( messages.map( message =>{\n            \n            return(\n                <div className=\"post card\" key={message._id} >\n                   \n                    <div className=\"card-content\">\n                       <span className=\"card-title \">{message.name}</span>\n                       <p>{message.email}</p>\n                       <p>{message.content}</p>\n                    </div>\n                </div>\n            )\n        })) : ( <div className=\"center\"> <h4> no messages yet</h4></div> ) \n    return(\n        <div className=\"container\">\n         {messagesList}\n        </div>\n        )\n    }\n}\n\nexport default ShowMessage;","import React, { Component } from 'react';\nimport AddMessage from './Component/AddMessage';\nimport NavBar from './Component/NavBar';\nimport ShowMessage from './Component/ShowMessage'\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\n\n\n\nclass App extends Component {\n \n  render() {\n    return (\n      <div className=\"App \">\n      <BrowserRouter>\n\n          <div>\n            <NavBar/>\n            <Switch>\n          \n              <Route  path=\"/showmessages\" component={ShowMessage}/>\n              <Route exact path='/' component={AddMessage}/>\n            </Switch>\n          </div>\n          \n      </BrowserRouter>\n          \n      \n          \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}